// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum LoginType {
  Normal
  GitHub
  Gmail
  Facebook
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  image         String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  phone         String    @unique
  password      String?
  loginType     LoginType @default(Normal)
  address       Address
  role          Role      @default(User)

  ventureIds String[]  @db.ObjectId
  ventures   Venture[] @relation("ventureAgent", fields: [ventureIds], references: [id])

  ownedVentures Venture[] @relation("ventureOwnership")

  siteVisits SiteVisit[]
}

enum Role {
  Admin
  Agent
  User
}

enum VentureCategory {
  Villas
  Individual_Houses
  Apartments
  Plots
  Grouped_House
  Gated_Community
  Semi_Gated_Community
  Standalone_Building
}

model Venture {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  address     Address
  startDate   DateTime?
  status      VentureStatus @default(Available)

  location  String?
  category  VentureCategory
  units     Int
  soldUnits Int

  ownerId String? @db.ObjectId
  owner   User?   @relation("ventureOwnership", fields: [ownerId], references: [id])

  agentIds String[] @db.ObjectId
  agents   User[]   @relation("ventureAgent", fields: [agentIds], references: [id])
}

type Address {
  street   String
  village  String
  city     String
  state    String
  country  String
  survey   String? // Survey Number
  landmark String?
}

enum ProspectStatus {
  Created // Just added the record
  Site_Visit // In Site Visit state
  Pending // Pending from prospect
  Interested // Covert to buy
  NotInterested // No more a prospect
  Bought // Success
  Dropped // Dropped somewhere in the progress
  Absconded // Not reachable
}

enum VentureStatus {
  Available
  Sold_Out
}

model Prospect {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  address    Address?
  status     ProspectStatus @default(Created)
  siteVisits SiteVisit[]
}

enum SiteVisitStatus {
  Requested
  Rejected
  Accepted
  VehicleAllocated
  Scheduled
  InProgress
  Success
  Failure
}

model SiteVisit {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  prospectId String   @db.ObjectId
  prospect   Prospect @relation(fields: [prospectId], references: [id])

  agentId String @db.ObjectId
  agent   User   @relation(fields: [agentId], references: [id])

  status SiteVisitStatus @default(Requested)

  address Address?
}
