// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginType {
  Normal
  GitHub
  Gmail
  Facebook
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name          String
  image         String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  phone         String    @unique
  password      String?
  loginType     LoginType @default(Normal)
  address       Json?
  role          Role      @default(User)

  companies Company[] @relation("companyOwner")
  agencies  Agency[]  @relation("agencyOwner")

  agent Agent?
}

model Agent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  // profile content
  location  String?
  job       String?
  education String?
  bio       String?
  image     String?
  cover     String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  agencies Agency[] @relation("agencyAgents")

  // Companies this agent working/worked
  companies Company[] @relation("companyAgents")

  // Projects this aget working for
  projects Project[] @relation("projectAgents")

  prospects Prospect[]
}

model Agency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name    String
  logo    String?
  email   String? @unique
  phone   String? @unique
  address Json?

  owner   User   @relation("agencyOwner", fields: [ownerId], references: [id])
  ownerId String

  agents Agent[] @relation("agencyAgents")

  // Companies this agency working for
  companies Company[] @relation("companyAgencies")

  // Projects this agency working for
  projects Project[] @relation("projectAgencies")

  prospects Prospect[]
}

enum Role {
  Admin
  Agent
  User
}

enum ProjectCategory {
  Villas
  Individual_Houses
  Apartments
  Plots
  Grouped_Houses
  Gated_Community
  Semi_Gated_Community
  Standalone_Building
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name    String
  logo    String?
  email   String? @unique
  phone   String? @unique
  address Json?

  owner   User   @relation("companyOwner", fields: [ownerId], references: [id])
  ownerId String

  projects Project[]

  // Agencies this company hired
  agencies Agency[] @relation("companyAgencies")

  // Agents this company hired
  agents Agent[] @relation("companyAgents")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name        String
  images      String[]
  description String
  address     Json
  startDate   DateTime?
  status      ProjectStatus @default(Available)

  location  String?
  category  ProjectCategory
  units     Int             @default(1)
  soldUnits Int             @default(0)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  // Agenices working for this project
  agencies Agency[] @relation("projectAgencies")

  // Agents working for this project
  agents Agent[] @relation("projectAgents")

  prospects Prospect[] @relation("projectProspects")
}

enum ProspectStatus {
  Created // Just added the record
  Site_Visit // In Site Visit state
  Pending // Pending from prospect
  Interested // Covert to buy
  NotInterested // No more a prospect
  Bought // Success
  Dropped // Dropped somewhere in the progress
  Absconded // Not reachable
}

enum ProjectStatus {
  Available
  Sold_Out
}

model Prospect {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name       String
  phone      String?        @unique
  email      String?        @unique
  address    Json?
  status     ProspectStatus @default(Created)
  siteVisits SiteVisit[]

  project   Project @relation("projectProspects", fields: [projectId], references: [id])
  projectId String

  agent    Agent?  @relation(fields: [agentId], references: [id])
  agentId  String?
  agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId String?
}

enum SiteVisitStatus {
  Requested
  Rejected
  Accepted
  VehicleAllocated
  Scheduled
  InProgress
  Success
  Failure
}

model SiteVisit {
  id String @id @default(cuid())

  prospect   Prospect @relation(fields: [prospectId], references: [id])
  prospectId String

  status SiteVisitStatus @default(Requested)
}
